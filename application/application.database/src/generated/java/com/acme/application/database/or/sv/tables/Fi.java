/*
 * This file is generated by jOOQ.
*/
package com.acme.application.database.or.sv.tables;


import com.acme.application.database.generator.converter.DateConverter;
import com.acme.application.database.or.sv.Keys;
import com.acme.application.database.or.sv.Sv;
import com.acme.application.database.or.sv.tables.records.FiRecord;

import java.util.Arrays;
import java.util.Date;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Fi extends TableImpl<FiRecord> {

    private static final long serialVersionUID = -1691715682;

    /**
     * The reference instance of <code>sv.FI</code>
     */
    public static final Fi FI = new Fi();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FiRecord> getRecordType() {
        return FiRecord.class;
    }

    /**
     * The column <code>sv.FI.ID</code>.
     */
    public final TableField<FiRecord, String> ID = createField("ID", org.jooq.impl.SQLDataType.VARCHAR.length(36).nullable(false), this, "");

    /**
     * The column <code>sv.FI.GEB_NR</code>.
     */
    public final TableField<FiRecord, String> GEB_NR = createField("GEB_NR", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

    /**
     * The column <code>sv.FI.ANL_NR</code>.
     */
    public final TableField<FiRecord, String> ANL_NR = createField("ANL_NR", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

    /**
     * The column <code>sv.FI.ANLAGE</code>.
     */
    public final TableField<FiRecord, String> ANLAGE = createField("ANLAGE", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

    /**
     * The column <code>sv.FI.ETAGE</code>.
     */
    public final TableField<FiRecord, String> ETAGE = createField("ETAGE", org.jooq.impl.SQLDataType.VARCHAR.length(36), this, "");

    /**
     * The column <code>sv.FI.STANDORT</code>.
     */
    public final TableField<FiRecord, String> STANDORT = createField("STANDORT", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

    /**
     * The column <code>sv.FI.SICHERUNG</code>.
     */
    public final TableField<FiRecord, String> SICHERUNG = createField("SICHERUNG", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

    /**
     * The column <code>sv.FI.IF</code>.
     */
    public final TableField<FiRecord, String> IF = createField("IF", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

    /**
     * The column <code>sv.FI.BEFUND</code>.
     */
    public final TableField<FiRecord, String> BEFUND = createField("BEFUND", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

    /**
     * The column <code>sv.FI.PRUEFMET</code>.
     */
    public final TableField<FiRecord, String> PRUEFMET = createField("PRUEFMET", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

    /**
     * The column <code>sv.FI.VISUM</code>.
     */
    public final TableField<FiRecord, String> VISUM = createField("VISUM", org.jooq.impl.SQLDataType.VARCHAR.length(64), this, "");

    /**
     * The column <code>sv.FI.DATUM</code>.
     */
    public final TableField<FiRecord, Date> DATUM = createField("DATUM", org.jooq.impl.SQLDataType.DATE, this, "", new DateConverter());

    /**
     * The column <code>sv.FI.ACTIVE</code>.
     */
    public final TableField<FiRecord, Boolean> ACTIVE = createField("ACTIVE", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * Create a <code>sv.FI</code> table reference
     */
    public Fi() {
        this("FI", null);
    }

    /**
     * Create an aliased <code>sv.FI</code> table reference
     */
    public Fi(String alias) {
        this(alias, FI);
    }

    private Fi(String alias, Table<FiRecord> aliased) {
        this(alias, aliased, null);
    }

    private Fi(String alias, Table<FiRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Sv.SV;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FiRecord> getPrimaryKey() {
        return Keys.PK_FI;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FiRecord>> getKeys() {
        return Arrays.<UniqueKey<FiRecord>>asList(Keys.PK_FI);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Fi as(String alias) {
        return new Fi(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Fi rename(String name) {
        return new Fi(name, null);
    }
}
